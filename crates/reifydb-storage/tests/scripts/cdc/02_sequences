# Copyright (c) reifydb.com 2025
# This file is licensed under the AGPL-3.0-or-later, see license.md file

# Test sequence starts at 1 for each version
insert 1 a=1
---
ok

cdc_get 1 1
---
CdcEvent { version: 1, seq: 1, ts: 1000, change: Insert { key: "a", after: "1" } }

insert 2 b=2
---
ok

cdc_get 2 1
---
CdcEvent { version: 2, seq: 1, ts: 1000, change: Insert { key: "b", after: "2" } }

# Test sequence increments within version
insert 3 c=3
---
ok

update 3 a=10
---
ok

update 3 b=20
---
ok

delete 3 c
---
ok

# Verify sequences 1, 2, 3, 4 for version 3
cdc_get 3 1
---
CdcEvent { version: 3, seq: 1, ts: 1000, change: Insert { key: "c", after: "3" } }

cdc_get 3 2
---
CdcEvent { version: 3, seq: 2, ts: 1000, change: Update { key: "a", before: "1", after: "10" } }

cdc_get 3 3
---
CdcEvent { version: 3, seq: 3, ts: 1000, change: Update { key: "b", before: "2", after: "20" } }

cdc_get 3 4
---
CdcEvent { version: 3, seq: 4, ts: 1000, change: Delete { key: "c", before: "3" } }

# Test that version 4 starts at sequence 1 again
insert 4 d=4
---
ok

cdc_get 4 1
---
CdcEvent { version: 4, seq: 1, ts: 1000, change: Insert { key: "d", after: "4" } }

# Test returning to a previous version continues sequence
update 3 d=30
---
ok

cdc_get 3 5
---
CdcEvent { version: 3, seq: 5, ts: 1000, change: Update { key: "d", before: "4", after: "30" } }
