# Copyright (c) reifydb.com 2025
# This file is licensed under the AGPL-3.0-or-later, see license.md file

# Test update coalescing - multiple updates in same transaction
# should coalesce into single CDC change from first to last value

# Setup initial state
insert 1 key_x=original_x
insert 1 key_y=original_y
insert 1 key_z=original_z
commit
---
ok

# Rapid updates to same key
update 2 key_x=v1
update 2 key_x=v2
update 2 key_x=v3
update 2 key_x=v4
update 2 key_x=v5
commit
---
ok

# Single Update from original to final
cdc_get 2 1
---
Change { seq: 1, change: Update { key: "key_x", pre: "original_x", post: "v5" } }

cdc_count 2
---
count: 1

# Interleaved updates to different keys
update 3 key_x=x1
update 3 key_y=y1
update 3 key_x=x2
update 3 key_z=z1
update 3 key_y=y2
update 3 key_x=x3
update 3 key_z=z2
commit
---
ok

# Each key gets one Update change
cdc_get 3 1
---
Change { seq: 1, change: Update { key: "key_x", pre: "v5", post: "x3" } }

cdc_get 3 2
---
Change { seq: 2, change: Update { key: "key_y", pre: "original_y", post: "y2" } }

cdc_get 3 3
---
Change { seq: 3, change: Update { key: "key_z", pre: "original_z", post: "z2" } }

cdc_count 3
---
count: 3

# Update back to original value
update 4 key_x=original_x
update 4 key_x=temp
update 4 key_x=original_x
commit
---
ok

# Should still show as Update even if final equals original
cdc_get 4 1
---
Change { seq: 1, change: Update { key: "key_x", pre: "x3", post: "original_x" } }

cdc_count 4
---
count: 1
