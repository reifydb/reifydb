# Copyright (c) reifydb.com 2025
# This file is licensed under the AGPL-3.0-or-later, see license.md file

# Test updating a key that doesn't exist in storage
# Should be tracked as Insert (not Update)

# Update non-existent key
update 1 never_existed=new_value
commit
---
ok

# Should appear as Insert since key didn't exist
cdc_get 1 1
---
Change { seq: 1, change: Insert { key: "never_existed", post: "new_value" } }

cdc_count 1
---
count: 1

# Multiple updates to non-existent key
update 2 another_new=v1
update 2 another_new=v2
update 2 another_new=v3
commit
---
ok

# Should be single Insert with final value
cdc_get 2 1
---
Change { seq: 1, change: Insert { key: "another_new", post: "v3" } }

cdc_count 2
---
count: 1

# Mix of updates to existent and non-existent keys
insert 3 exists=original
commit
---
ok

update 4 exists=modified
update 4 not_exists=created
commit
---
ok

# One Update, one Insert
cdc_get 4 1
---
Change { seq: 1, change: Update { key: "exists", pre: "original", post: "modified" } }

cdc_get 4 2
---
Change { seq: 2, change: Insert { key: "not_exists", post: "created" } }

cdc_count 4
---
count: 2

# Update non-existent then delete in same transaction
update 5 will_cancel=temp
delete 5 will_cancel
commit
---
ok

# Should completely cancel (insert+delete)
cdc_count 5
---
count: 0
